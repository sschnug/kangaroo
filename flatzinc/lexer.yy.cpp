#line 2 "lexer.yy.cpp"

#line 4 "lexer.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[519] =
    {   0,
        0,    0,    0,    0,   70,   68,    2,    1,   68,    3,
       12,   68,   12,    6,    6,   12,   14,   65,   68,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   68,    2,
        1,   68,    3,   12,   68,   12,    6,    6,   12,   14,
       65,   68,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,    0,   67,    3,    6,    6,   13,    0,    0,    0,
        0,   15,   65,   66,    0,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   30,   31,   65,   65,

       65,   65,   65,   65,   41,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,    0,   48,    0,   67,   48,
        3,    3,    6,    6,   13,    0,    0,    0,    0,   15,
       65,   66,    0,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   30,   31,   65,   65,   65,   65,
       65,   65,   41,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,    9,    0,   11,    8,    7,   66,   65,
       17,   65,   65,   65,   65,   65,   23,   65,   65,   65,

       65,   65,   65,   65,   33,   35,   65,   65,   65,   39,
       40,   65,   46,   65,   65,   65,   50,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   61,
       65,   64,    9,    0,   11,    8,    7,   66,   65,   17,
       65,   65,   65,   65,   65,   23,   65,   65,   65,   65,
       65,   65,   65,   33,   35,   65,   65,   65,   39,   40,
       65,   46,   65,   65,   65,   50,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   61,   65,
       64,    0,   65,   65,   19,   20,   65,   22,   24,   65,
       27,   65,   65,   65,   65,   65,   36,   65,   65,   65,

       65,   65,   65,   52,   65,   65,   65,   65,   65,   56,
       57,    4,   65,   59,   65,   65,   65,    0,   65,   65,
       19,   20,   65,   22,   24,   65,   27,   65,   65,   65,
       65,   65,   36,   65,   65,   65,   65,   65,   65,   52,
       65,   65,   65,   65,   65,   56,   57,    4,   65,   59,
       65,   65,   65,    0,   10,   65,   18,   65,   65,   26,
        5,   28,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   53,   65,   65,   65,   65,   58,   60,   65,
       63,    0,   10,   65,   18,   65,   65,   26,    5,   28,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       53,   65,   65,   65,   65,   58,   60,   65,   63,   65,
       65,   25,   65,   65,   65,   65,   65,   45,   65,   49,
       65,   65,   54,   43,   65,   65,   65,   65,   65,   25,
       65,   65,   65,   65,   65,   45,   65,   49,   65,   65,
       54,   43,   65,   65,   65,   65,   65,   65,   32,   65,
       65,   65,   65,   42,   65,   65,   55,   65,   65,   65,
       65,   32,   65,   65,   65,   65,   42,   65,   65,   55,
       65,   65,   65,   29,   65,   37,   38,   65,   65,   44,
       65,   65,   65,   29,   65,   37,   38,   65,   65,   44,
       65,   65,   65,   34,   47,   51,   65,   65,   65,   34,

       47,   51,   65,   16,   21,   65,   16,   21,   65,   65,
       65,   65,   65,   65,   65,   62,   62,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    5,    1,    1,    6,
        6,    1,    7,    6,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   11,   11,   12,   12,   13,   14,    1,
        6,    1,    1,    1,   15,   15,   15,   15,   16,   15,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
        6,    1,    6,    1,   18,    1,   19,   20,   21,   22,

       23,   24,   25,   26,   27,   17,   17,   28,   29,   30,
       31,   32,   17,   33,   34,   35,   36,   37,   38,   39,
       40,   41,    6,    1,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[42] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    1,    1,    4,    4,    5,    5,    4,    4,
        4,    4,    4,    4,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5
    } ;

static yyconst flex_int16_t yy_base[531] =
    {   0,
        0,    0,   41,    0, 1165, 1166, 1166, 1166, 1160,    0,
     1166,   73, 1154,   77,   86, 1149, 1166,    0, 1143,   61,
     1129,   73, 1132,   71,   84,   81,   83,   88, 1127,   89,
       95, 1134,  110,   98, 1126, 1136, 1128, 1122, 1138, 1137,
     1136,  123,  129, 1135,  137,  108,  143,  125,  126, 1166,
      182,  196,  214,  130,  139,  135,  143,  205,  201,  209,
      148,  215,  219,  207,  227,  242,  253,  147,  234,  233,
      254, 1144, 1166,    0,    0,  285, 1166,  182,  292,  201,
        0, 1166,    0,    0, 1129,  240, 1113, 1114, 1110, 1113,
      232, 1108,  108, 1113, 1109, 1109,    0,  253, 1103, 1103,

     1097, 1105, 1112, 1098,    0, 1097, 1098, 1107, 1108, 1093,
     1092, 1095, 1097, 1091,  103, 1094, 1088, 1098, 1084, 1087,
     1086, 1090, 1083, 1092, 1081, 1099, 1166,  302, 1098, 1107,
      248,    0,    0,  259, 1096,  299,  307,  312,  317, 1095,
      312,  345,  359,  345,  346,  350,  354,  356,  366,  361,
      371,  372,  378,  380,  382,  393,  386,  397,  399,  387,
      403,  404,  410,  411,  412,  424,  428,  418,  429,  435,
      422,  430,  447,  440,  441,  453,  448,  455,  459,  463,
      464,  472,  468,  496,  345,  499,  219,    0,    0, 1077,
        0, 1088, 1078, 1082, 1070, 1079,    0, 1079, 1074, 1071,

     1065, 1079, 1076, 1068, 1072,    0, 1059, 1066, 1065,    0,
        0, 1059,    0, 1068, 1058, 1061,    0, 1049, 1049, 1058,
     1050, 1060, 1060, 1046, 1050, 1056, 1050, 1054, 1045, 1048,
     1041,    0,  504,  511,  518,  489,    0,  532,  517,  519,
      523,  527,  521,  528,  535,  533,  541,  540,  546,  547,
      553,  557,  561,  562,  563,  567,  571,  576,  575,  577,
      581,  582,  594,  587,  592,  593,  598,  600,  602,  608,
      616,  618,  617,  623,  631,  627,  635,  636,  643,  629,
      641,  670, 1038, 1032,    0,    0, 1036,    0, 1043, 1045,
        0, 1045, 1032,  988,  982,  982,    0,  959,  948,  917,

      910,  903,  882,  894,  819,  791,  786,  762,  759,    0,
        0,    0,  758,    0,  726,  736,  728,  676,  659,  663,
      642,  665,  667,  671,  678,  682,  677,  686,  687,  688,
      694,  695,  696,  702,  704,  706,  711,  710,  715,  728,
      724,  720,  729,  730,  737,  735,  736,  741,  749,  743,
      745,  758,  757,  633,  773,  695,    0,  680,  675,    0,
        0,    0,  664,  663,  645,  636,  607,  586,  578,  566,
      560,  561,    0,  544,  508,  497,  502,    0,    0,  494,
        0,  782,  787,  770,  772,  774,  782,  778,  780,  784,
      789,  796,  790,  798,  800,  802,  813,  814,  815,  819,

      808,  825,  821,  827,  829,  833,  834,  835,  839,  482,
      494,    0,  473,  459,  449,  415,  394,    0,  405,    0,
      382,  387,    0,    0,  383,  374,  362,  840,  852,  844,
      848,  853,  857,  858,  859,  863,  865,  864,  871,  872,
      876,  877,  885,  889,  890,  365,  355,  344,    0,  323,
      320,  312,  299,    0,  300,  290,    0,  306,  894,  899,
      884,  898,  909,  910,  911,  915,  905,  916,  921,  922,
      929,  289,  282,    0,  272,    0,    0,  269,  269,    0,
      248,  927,  931,  933,  935,  939,  941,  950,  945,  946,
      951,  241,  223,    0,    0,    0,  231,  952,  956,  957,

      962,  963,  971,    0,    0,  192,  967,  969,  977,  111,
      975,   85,  979,   68,  981,    0,  983, 1166, 1016, 1021,
     1024, 1026, 1031, 1036, 1041, 1046, 1051, 1054, 1056, 1061
    } ;

static yyconst flex_int16_t yy_def[531] =
    {   0,
      518,    1,  518,    3,  518,  518,  518,  518,  519,  520,
      518,  518,  518,  518,  518,  518,  518,  521,  522,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  523,  523,
      523,  524,  525,  523,  523,  523,  523,   47,  523,  518,
      526,  527,  526,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,  519,  518,  520,   14,  518,  518,  518,  518,  518,
      528,  518,  521,  529,  522,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  523,  518,  524,  523,  519,
      525,  520,   47,   47,  523,  523,  523,  523,  523,  523,
       53,  530,  527,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,  518,  518,  518,  518,  528,  529,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  523,  523,  523,  523,  139,  530,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,  518,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,

      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  523,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,  518,  518,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  523,  523,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,   53,   53,   53,   53,   53,   53,  521,
      521,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521,  521,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,  521,  521,  521,  521,  521,  521,   53,   53,   53,

       53,   53,   53,  521,  521,  521,   53,   53,   53,  521,
       53,  521,   53,  521,   53,  521,   53,    0,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518
    } ;

static yyconst flex_int16_t yy_nxt[1208] =
    {   0,
        6,    7,    8,    9,   10,   11,    6,   12,   13,   14,
       15,   15,   16,   17,   18,   18,   18,   19,   20,   21,
       22,   23,   24,   25,   18,   18,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   18,
       18,   39,   40,   41,   42,   43,   44,   39,   45,   46,
       47,   48,   48,   49,   50,   51,   51,   51,   52,   53,
       54,   55,   56,   57,   58,   51,   51,   59,   60,   61,
       62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
       51,   51,   75,   76,   76,   78,   76,   76,   76,  516,
       86,   89,   79,   87,   78,   76,   76,   76,   92,   79,

       93,   79,   94,   90,   97,   99,  101,   80,   79,  100,
       98,   95,  105,  107,  102,   81,  135,  514,  103,   96,
      117,  127,  221,  118,  106,  126,  129,  108,  110,  199,
      119,  126,  111,  120,  222,  112,  130,  121,  140,  127,
      113,  512,  132,  200,  114,  115,  133,  134,  134,  116,
      127,  136,  134,  134,  134,  126,  127,  147,  137,  141,
      146,  149,  141,  126,  141,  137,  159,  141,  141,  148,
      150,  141,  151,  138,  160,  141,  180,  141,  161,  141,
      141,  139,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  184,  184,  184,  126,  127,  126,  126,  126,  126,

      126,  126,  126,  126,  126,  126,  126,  126,  126,  127,
      187,  187,  510,  143,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  152,  155,  165,  126,  127,  187,  187,
      156,  157,  153,  141,  141,  158,  141,  141,  141,  166,
      154,  141,  163,  144,  141,  162,  145,  141,  141,  167,
      126,  141,  181,  506,  164,  196,  141,  505,  182,  141,
      168,  132,  141,  141,  169,  141,  141,  170,  197,  190,
      504,  141,  171,  204,  141,  175,  172,  173,  176,  191,
      497,  174,  141,  141,  183,  177,  141,  205,  178,  126,
      496,  495,  179,   78,   76,   76,   76,  126,  185,  185,

       79,  186,  186,  186,  126,  129,  494,   79,  233,  233,
      233,  493,  127,  234,  234,  130,  235,  235,  235,  492,
      127,  236,  236,  481,  480,  127,  237,  237,  237,  479,
      127,  237,  237,  478,  477,  237,  237,  237,  237,  237,
      237,  141,  476,  475,  141,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  186,  186,  186,  126,  127,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  127,  474,  239,  141,  143,  141,  241,  141,
      242,  473,  141,  141,  240,  244,  141,  243,  141,  245,
      141,  472,  248,  141,  247,  141,  458,  457,  141,  250,

      141,  141,  246,  141,  141,  456,  249,  141,  251,  252,
      141,  141,  141,  253,  141,  141,  258,  455,  141,  141,
      255,  454,  141,  453,  259,  141,  141,  254,  141,  141,
      256,  141,  141,  141,  452,  141,  141,  257,  260,  141,
      141,  141,  141,  141,  262,  261,  263,  141,  264,  268,
      141,  141,  265,  141,  141,  451,  141,  141,  141,  141,
      141,  141,  269,  266,  141,  267,  270,  141,  272,  141,
      141,  450,  141,  141,  273,  274,  141,  141,  271,  141,
      141,  449,  141,  275,  141,  141,  276,  141,  141,  278,
      277,  141,  141,  141,  280,  141,  279,  141,  236,  236,

      281,  141,  127,  448,  141,  184,  184,  184,  186,  186,
      186,  282,  447,  233,  233,  233,  446,  127,  282,  318,
      235,  235,  235,  427,  127,  426,  318,  235,  235,  235,
      425,  127,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  320,  424,  322,  126,  127,  141,  319,  141,  141,
      141,  141,  141,  141,  321,  141,  141,  141,  324,  141,
      141,  323,  141,  325,  141,  141,  326,  141,  423,  141,
      141,  329,  141,  141,  327,  141,  141,  330,  141,  141,
      328,  422,  141,  421,  332,  141,  141,  420,  331,  141,
      141,  141,  141,  141,  141,  141,  141,  334,  419,  141,

      141,  333,  335,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  336,  141,  141,  337,  141,  338,  339,  141,
      418,  141,  141,  141,  141,  141,  141,  141,  342,  141,
      141,  141,  141,  417,  141,  340,  341,  141,  344,  345,
      141,  343,  355,  355,  355,  141,  141,  141,  141,  141,
      141,  346,  347,  348,  349,  141,  141,  350,  141,  141,
      141,  353,  416,  141,  141,  141,  351,  141,  141,  352,
      141,  141,  141,  141,  141,  141,  354,  354,  415,  355,
      355,  355,  382,  382,  414,  383,  383,  383,  141,  127,
      413,  141,  141,  384,  141,  141,  141,  141,  412,  141,

      141,  386,  385,  141,  387,  388,  141,  141,  389,  141,
      141,  141,  411,  410,  141,  141,  141,  141,  141,  141,
      141,  390,  391,  141,  141,  141,  141,  393,  141,  392,
      394,  141,  395,  141,  141,  141,  141,  397,  141,  141,
      141,  396,  398,  141,  141,  400,  401,  141,  399,  402,
      381,  403,  141,  141,  380,  379,  141,  141,  141,  141,
      141,  141,  404,  405,  141,  141,  141,  141,  141,  141,
      141,  406,  141,  141,  407,  141,  408,  141,  141,  409,
      378,  141,  355,  355,  355,  377,  141,  141,  428,  141,
      141,  383,  383,  383,  376,  127,  383,  383,  383,  141,

      127,  141,  141,  141,  141,  430,  429,  141,  375,  141,
      141,  141,  141,  141,  141,  431,  141,  432,  141,  141,
      374,  141,  141,  433,  434,  141,  435,  141,  141,  141,
      141,  141,  141,  437,  141,  438,  436,  141,  439,  440,
      141,  373,  141,  141,  141,  141,  141,  141,  141,  441,
      141,  141,  444,  141,  141,  442,  141,  141,  141,  141,
      443,  141,  141,  141,  445,  141,  141,  141,  141,  141,
      460,  141,  141,  141,  459,  462,  141,  141,  461,  463,
      141,  141,  141,  466,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  464,  465,

      141,  141,  468,  141,  141,  141,  141,  469,  141,  141,
      467,  372,  470,  484,  141,  371,  141,  141,  141,  141,
      482,  141,  141,  141,  471,  483,  141,  141,  141,  485,
      141,  141,  486,  487,  141,  370,  369,  141,  141,  141,
      141,  141,  141,  141,  141,  489,  491,  141,  141,  488,
      141,  141,  368,  141,  141,  490,  141,  498,  141,  141,
      499,  141,  141,  141,  141,  141,  502,  141,  141,  500,
      141,  141,  501,  141,  141,  141,  367,  141,  141,  141,
      141,  507,  141,  503,  141,  141,  141,  366,  141,  141,
      508,  141,  141,  509,  141,  141,  141,  511,  141,  141,

      141,  141,  517,  141,  141,  513,  141,  141,  141,  141,
      141,  515,  141,  141,  365,  141,   72,  364,   72,   72,
       72,   74,  363,   74,   74,   74,   83,   83,   83,   84,
       84,  126,  126,  126,  126,  126,  128,  128,  128,  128,
      128,  131,  131,  131,  131,  131,  141,  141,  141,  141,
      141,  142,  142,  142,  142,  142,  188,  188,  189,  189,
      189,  238,  238,  238,  238,  238,  362,  361,  360,  359,
      358,  357,  356,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,

      290,  289,  288,  287,  286,  285,  284,  283,  127,  127,
       73,  127,  127,  232,  231,  230,  229,  228,  227,  226,
      225,  224,  223,  220,  219,  218,  217,  216,  215,  214,
      213,  212,  211,  210,  209,  208,  207,  206,  203,  202,
      201,  198,  195,  194,  193,  192,   85,   73,  127,  127,
      127,  127,  125,  124,  123,  122,  109,  104,   91,   88,
       85,   82,   77,   73,  518,    5,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518
    } ;

static yyconst flex_int16_t yy_chk[1208] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,   12,   12,   12,   14,   14,   14,   14,  514,
       20,   22,   14,   20,   15,   15,   15,   15,   24,   14,

       24,   15,   25,   22,   26,   27,   28,   14,   15,   27,
       26,   25,   30,   31,   28,   14,   46,  512,   28,   25,
       34,   46,  115,   34,   30,   42,   42,   31,   33,   93,
       34,   43,   33,   34,  115,   33,   42,   34,   49,   49,
       33,  510,   43,   93,   33,   33,   45,   45,   45,   33,
       45,   47,   47,   47,   47,   48,   47,   55,   47,   54,
       54,   56,   54,   48,   56,   47,   61,   56,   55,   55,
       57,   55,   57,   47,   61,   57,   68,   61,   61,   68,
       61,   47,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   78,   78,   78,   51,   51,   52,   52,   52,   52,

       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       80,   80,  506,   52,   53,   53,   53,   53,   53,   53,
       53,   53,   53,   58,   59,   64,   53,   53,  187,  187,
       59,   60,   58,   59,   58,   60,   64,   58,   60,   64,
       58,   60,   63,   53,   62,   62,   53,   62,   63,   65,
      131,   63,   69,  497,   63,   91,   65,  493,   70,   65,
       66,  131,   70,   69,   66,   70,   69,   66,   91,   86,
      492,   66,   66,   98,   66,   67,   66,   66,   67,   86,
      481,   66,   67,   71,   71,   67,   71,   98,   67,  134,
      479,  478,   67,   76,   76,   76,   76,  134,   79,   79,

       76,   79,   79,   79,  128,  128,  475,   76,  136,  136,
      136,  473,  136,  137,  137,  128,  137,  137,  137,  472,
      137,  138,  138,  458,  456,  138,  139,  139,  139,  455,
      139,  139,  139,  453,  452,  139,  139,  139,  139,  139,
      139,  141,  451,  450,  141,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  185,  185,  185,  142,  142,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  448,  144,  145,  143,  144,  145,  146,
      146,  447,  146,  147,  144,  148,  147,  147,  148,  149,
      150,  446,  151,  150,  150,  149,  427,  426,  149,  152,

      151,  152,  149,  151,  152,  425,  151,  153,  153,  154,
      153,  155,  154,  156,  155,  157,  160,  422,  157,  160,
      157,  421,  156,  419,  161,  156,  158,  156,  159,  158,
      158,  159,  161,  162,  417,  161,  162,  159,  162,  163,
      164,  165,  163,  164,  165,  164,  166,  168,  167,  171,
      168,  171,  168,  166,  171,  416,  166,  167,  169,  172,
      167,  169,  172,  169,  170,  170,  173,  170,  174,  174,
      175,  415,  174,  175,  175,  176,  173,  177,  173,  173,
      177,  414,  176,  177,  178,  176,  178,  178,  179,  180,
      179,  179,  180,  181,  182,  180,  181,  183,  236,  236,

      183,  182,  236,  413,  182,  184,  184,  184,  186,  186,
      186,  184,  411,  233,  233,  233,  410,  233,  184,  233,
      234,  234,  234,  380,  234,  377,  233,  235,  235,  235,
      376,  235,  238,  238,  238,  238,  238,  238,  238,  238,
      238,  241,  375,  243,  238,  238,  239,  239,  240,  239,
      243,  240,  241,  243,  242,  241,  242,  244,  245,  242,
      244,  244,  246,  247,  245,  246,  248,  245,  374,  248,
      247,  251,  248,  247,  249,  249,  250,  252,  249,  250,
      250,  372,  251,  371,  254,  251,  252,  370,  253,  252,
      253,  254,  255,  253,  254,  255,  256,  257,  369,  256,

      257,  256,  258,  257,  259,  258,  260,  259,  258,  260,
      261,  262,  261,  261,  262,  263,  264,  264,  265,  264,
      368,  265,  266,  263,  265,  266,  263,  267,  269,  268,
      267,  269,  268,  367,  269,  267,  268,  270,  271,  272,
      270,  270,  354,  354,  354,  271,  273,  272,  271,  273,
      272,  273,  274,  275,  276,  274,  276,  277,  280,  276,
      275,  280,  366,  275,  277,  278,  278,  277,  278,  279,
      281,  321,  279,  281,  321,  279,  282,  282,  365,  282,
      282,  282,  318,  318,  364,  318,  318,  318,  319,  318,
      363,  319,  320,  319,  322,  320,  323,  322,  359,  323,

      324,  323,  320,  324,  325,  326,  327,  325,  328,  327,
      325,  326,  358,  356,  326,  328,  329,  330,  328,  329,
      330,  329,  330,  331,  332,  333,  331,  332,  333,  331,
      334,  334,  335,  335,  334,  336,  335,  337,  336,  338,
      337,  336,  338,  337,  339,  340,  341,  339,  339,  342,
      317,  343,  342,  341,  316,  315,  341,  340,  343,  344,
      340,  343,  344,  345,  346,  347,  345,  346,  347,  345,
      348,  349,  350,  348,  351,  350,  352,  351,  349,  353,
      313,  349,  355,  355,  355,  309,  353,  352,  384,  353,
      352,  382,  382,  382,  308,  382,  383,  383,  383,  384,

      383,  385,  384,  386,  385,  387,  386,  388,  307,  389,
      388,  387,  389,  390,  387,  391,  390,  392,  391,  393,
      306,  391,  393,  393,  394,  392,  395,  394,  392,  395,
      394,  396,  395,  397,  396,  398,  396,  401,  399,  400,
      401,  305,  397,  398,  399,  397,  398,  399,  400,  402,
      403,  400,  405,  403,  402,  403,  404,  402,  405,  404,
      404,  405,  406,  407,  408,  406,  407,  408,  409,  428,
      429,  409,  428,  430,  428,  432,  430,  431,  431,  433,
      431,  429,  432,  437,  429,  432,  433,  434,  435,  433,
      434,  435,  436,  438,  437,  436,  438,  437,  434,  435,

      439,  440,  440,  439,  440,  441,  442,  443,  441,  442,
      439,  304,  444,  461,  443,  303,  461,  443,  444,  445,
      459,  444,  445,  459,  445,  460,  459,  462,  460,  463,
      462,  460,  464,  465,  467,  302,  301,  467,  463,  464,
      465,  463,  464,  465,  466,  468,  471,  466,  468,  466,
      469,  470,  300,  469,  470,  469,  482,  482,  471,  482,
      483,  471,  484,  483,  485,  484,  489,  485,  486,  485,
      487,  486,  488,  487,  489,  490,  299,  489,  490,  488,
      491,  498,  488,  491,  498,  499,  500,  298,  499,  500,
      499,  501,  502,  503,  501,  502,  507,  509,  508,  507,

      503,  508,  515,  503,  511,  511,  509,  511,  513,  509,
      515,  513,  517,  515,  296,  517,  519,  295,  519,  519,
      519,  520,  294,  520,  520,  520,  521,  521,  521,  522,
      522,  523,  523,  523,  523,  523,  524,  524,  524,  524,
      524,  525,  525,  525,  525,  525,  526,  526,  526,  526,
      526,  527,  527,  527,  527,  527,  528,  528,  529,  529,
      529,  530,  530,  530,  530,  530,  293,  292,  290,  289,
      287,  284,  283,  231,  230,  229,  228,  227,  226,  225,
      224,  223,  222,  221,  220,  219,  218,  216,  215,  214,
      212,  209,  208,  207,  205,  204,  203,  202,  201,  200,

      199,  198,  196,  195,  194,  193,  192,  190,  140,  135,
      130,  129,  126,  125,  124,  123,  122,  121,  120,  119,
      118,  117,  116,  114,  113,  112,  111,  110,  109,  108,
      107,  106,  104,  103,  102,  101,  100,   99,   96,   95,
       94,   92,   90,   89,   88,   87,   85,   72,   44,   41,
       40,   39,   38,   37,   36,   35,   32,   29,   23,   21,
       19,   16,   13,    9,    5,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  518,  518,  518,  518,  518,

      518,  518,  518,  518,  518,  518,  518
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[70] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.lxx"
/* -*- mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*- */
/**
 * Authors: 
 *     Duc Nghia Pham <duc-nghia.pham@nicta.com.au>
 *     Hakim Newton   <hakim.newton@nicta.com.au>
 *
 * Modified from Gecode's flatzinc-skeleton-1.1 to work with Kangaroo
 */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2007
 *
 *  Last modified:
 *     $Date: 2006-12-11 03:27:31 +1100 (Mon, 11 Dec 2006) $ by $Author: schulte $
 *     $Revision: 4024 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
#line 53 "lexer.lxx"
#if defined __GNUC__
#pragma GCC diagnostic ignored "-Wunused-function"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#pragma GCC diagnostic ignored "-Wsign-compare"
#elif defined _MSC_VER
#pragma warning(push, 1)
#endif

void yyerror(void*, const char*);

#define yyerror2(s) yyerror(yyextra, s)

#include "parser.hpp"

const char* stringbuf;
int stringbuflen;
int stringbufpos;

int yy_input_proc(char* buf, int size, yyscan_t yyscanner);
#define YY_INPUT(buf, result, max_size) \
	result = yy_input_proc(buf, max_size, yyscanner);

#line 966 "lexer.yy.cpp"

#define INITIAL 0
#define IN_PREDICATE 1

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * yyget_lval (yyscan_t yyscanner );

void yyset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param ,yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 78 "lexer.lxx"


#line 1208 "lexer.yy.cpp"

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 519 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1166 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 80 "lexer.lxx"
{ /*yylineno++;*/ /* ignore EOL */ }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 81 "lexer.lxx"
{ /* ignore whitespace */ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 82 "lexer.lxx"
{ /* ignore comments */ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 84 "lexer.lxx"
{ yylval->iValue = 1; return FZ_BOOL_CONST; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 85 "lexer.lxx"
{ yylval->iValue = 0; return FZ_BOOL_CONST; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 87 "lexer.lxx"
{ yylval->iValue = atoi(yytext); return FZ_INT_CONST; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 88 "lexer.lxx"
{ yylval->iValue = atoi(yytext); return FZ_INT_CONST; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 89 "lexer.lxx"
{ yylval->iValue = atoi(yytext); return FZ_INT_CONST; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 91 "lexer.lxx"
{ yylval->dValue = atof(yytext); return FZ_FLOAT_CONST; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 92 "lexer.lxx"
{ yylval->dValue = atof(yytext); return FZ_FLOAT_CONST; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 93 "lexer.lxx"
{ yylval->dValue = atof(yytext); return FZ_FLOAT_CONST; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "lexer.lxx"
{ return *yytext; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 96 "lexer.lxx"
{ return FZ_DOTDOT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 97 "lexer.lxx"
{ return FZ_SEMICOLON; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 98 "lexer.lxx"
{ return FZ_COLONCOLON; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 100 "lexer.lxx"
{ return FZ_ANNOTATION; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "lexer.lxx"
{ return FZ_ANY; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 102 "lexer.lxx"
{ return FZ_ARRAY; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 103 "lexer.lxx"
{ return FZ_BOOL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 104 "lexer.lxx"
{ return FZ_CASE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 105 "lexer.lxx"
{ return FZ_CONSTRAINT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 106 "lexer.lxx"
{ return FZ_DIFF; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 107 "lexer.lxx"
{ return FZ_DIV; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 108 "lexer.lxx"
{ return FZ_ELSE; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 109 "lexer.lxx"
{ return FZ_ELSEIF; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 110 "lexer.lxx"
{ return FZ_ENDIF; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 111 "lexer.lxx"
{ return FZ_ENUM; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 112 "lexer.lxx"
{ return FZ_FLOAT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 113 "lexer.lxx"
{ return FZ_FUNCTION; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 114 "lexer.lxx"
{ return FZ_IF; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 115 "lexer.lxx"
{ return FZ_IN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 116 "lexer.lxx"
{ return FZ_INCLUDE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 117 "lexer.lxx"
{ return FZ_INT; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 118 "lexer.lxx"
{ return FZ_INTERSECT; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 119 "lexer.lxx"
{ return FZ_LET; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 120 "lexer.lxx"
{ return FZ_LIST; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 121 "lexer.lxx"
{ return FZ_MAXIMIZE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 122 "lexer.lxx"
{ return FZ_MINIMIZE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 123 "lexer.lxx"
{ return FZ_MOD; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 124 "lexer.lxx"
{ return FZ_NOT; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 125 "lexer.lxx"
{ return FZ_OF; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 126 "lexer.lxx"
{ return FZ_SATISFY; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 127 "lexer.lxx"
{ return FZ_SUBSET; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 128 "lexer.lxx"
{ return FZ_SUPERSET; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 129 "lexer.lxx"
{ return FZ_OUTPUT; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 130 "lexer.lxx"
{ return FZ_PAR; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 132 "lexer.lxx"
{ BEGIN(IN_PREDICATE); }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 133 "lexer.lxx"
{ printf("ignoring predicate %s\n", yytext); BEGIN(INITIAL); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 135 "lexer.lxx"
{ return FZ_RECORD; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 136 "lexer.lxx"
{ return FZ_SET; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 137 "lexer.lxx"
{ return FZ_SHOWCOND; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 138 "lexer.lxx"
{ return FZ_SHOW; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 139 "lexer.lxx"
{ return FZ_SOLVE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 140 "lexer.lxx"
{ return FZ_STRING; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 141 "lexer.lxx"
{ return FZ_SYMDIFF; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 142 "lexer.lxx"
{ return FZ_TEST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 143 "lexer.lxx"
{ return FZ_THEN; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 144 "lexer.lxx"
{ return FZ_TUPLE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 145 "lexer.lxx"
{ return FZ_TYPE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 146 "lexer.lxx"
{ return FZ_UNION; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 147 "lexer.lxx"
{ return FZ_VAR; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 148 "lexer.lxx"
{ return FZ_VARIANT_RECORD; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 149 "lexer.lxx"
{ return FZ_WHERE; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 150 "lexer.lxx"
{ return FZ_XOR; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 152 "lexer.lxx"
{ yylval->sValue = strdup(yytext); return FZ_ID; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 153 "lexer.lxx"
{ yylval->sValue = strdup(yytext); return FZ_U_ID; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 154 "lexer.lxx"
{
                    yylval->sValue = strdup(yytext+1);
                    yylval->sValue[strlen(yytext)-2] = 0; 
                    return FZ_STRING_CONST; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 158 "lexer.lxx"
{ yyerror2("Unknown character");
                                     }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 160 "lexer.lxx"
ECHO;
	YY_BREAK
#line 1656 "lexer.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IN_PREDICATE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 519 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 519 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 518);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */

int yylex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    yyset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 160 "lexer.lxx"


int yy_input_proc(char* buf, int size, yyscan_t yyscanner) {
	FlatZinc::ParserState* parm = 
		static_cast<FlatZinc::ParserState*>(yyget_extra(yyscanner));
	return parm->fillBuffer(buf, size);
}

