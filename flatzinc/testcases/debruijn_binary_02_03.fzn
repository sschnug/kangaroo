predicate kangaroo_int_all_different(array [int] of var int: x);
predicate kangaroo_int_all_different_reif(array [int] of var int: x, var bool: r);
var bool: BOOL____00017 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00019 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00021 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00023 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00025 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00027 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00029 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00031 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00033 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00035 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00037 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00039 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00041 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00043 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00045 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00047 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00034 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00036 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00038 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00040 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00042 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00044 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00046 :: is_defined_var :: var_is_introduced;
var 0..1: INT____00048 :: is_defined_var :: var_is_introduced;
array [1..8] of var 0..1: bin_code :: output_array([1..8]);
array [1..24] of var 0..1: binary :: output_array([1..8, 1..3]);
array [1..2] of var -20..20: gcc :: output_array([0..1]);
array [1..3] of var 0..1: t____00009;
array [1..3] of var 0..1: t____00010;
array [1..3] of var 0..1: t____00011;
array [1..3] of var 0..1: t____00012;
array [1..3] of var 0..1: t____00013;
array [1..3] of var 0..1: t____00014;
array [1..3] of var 0..1: t____00015;
array [1..3] of var 0..1: t____00016;
array [1..8] of var 0..7: x :: output_array([1..8]);
array [1..8] of var 0..7: y____00001;
constraint bool2int(BOOL____00017, INT____00018) :: defines_var(INT____00018);
constraint bool2int(BOOL____00019, INT____00020) :: defines_var(INT____00020);
constraint bool2int(BOOL____00021, INT____00022) :: defines_var(INT____00022);
constraint bool2int(BOOL____00023, INT____00024) :: defines_var(INT____00024);
constraint bool2int(BOOL____00025, INT____00026) :: defines_var(INT____00026);
constraint bool2int(BOOL____00027, INT____00028) :: defines_var(INT____00028);
constraint bool2int(BOOL____00029, INT____00030) :: defines_var(INT____00030);
constraint bool2int(BOOL____00031, INT____00032) :: defines_var(INT____00032);
constraint bool2int(BOOL____00033, INT____00034) :: defines_var(INT____00034);
constraint bool2int(BOOL____00035, INT____00036) :: defines_var(INT____00036);
constraint bool2int(BOOL____00037, INT____00038) :: defines_var(INT____00038);
constraint bool2int(BOOL____00039, INT____00040) :: defines_var(INT____00040);
constraint bool2int(BOOL____00041, INT____00042) :: defines_var(INT____00042);
constraint bool2int(BOOL____00043, INT____00044) :: defines_var(INT____00044);
constraint bool2int(BOOL____00045, INT____00046) :: defines_var(INT____00046);
constraint bool2int(BOOL____00047, INT____00048) :: defines_var(INT____00048);
constraint int_eq(bin_code[1], binary[1]);
constraint int_eq(bin_code[2], binary[4]);
constraint int_eq(bin_code[3], binary[7]);
constraint int_eq(bin_code[4], binary[10]);
constraint int_eq(bin_code[5], binary[13]);
constraint int_eq(bin_code[6], binary[16]);
constraint int_eq(bin_code[7], binary[19]);
constraint int_eq(bin_code[8], binary[22]);
constraint int_eq(binary[1], t____00009[1]);
constraint int_eq(binary[2], binary[4]);
constraint int_eq(binary[2], t____00009[2]);
constraint int_eq(binary[3], binary[5]);
constraint int_eq(binary[3], t____00009[3]);
constraint int_eq(binary[4], t____00010[1]);
constraint int_eq(binary[5], binary[7]);
constraint int_eq(binary[5], t____00010[2]);
constraint int_eq(binary[6], binary[8]);
constraint int_eq(binary[6], t____00010[3]);
constraint int_eq(binary[7], t____00011[1]);
constraint int_eq(binary[8], binary[10]);
constraint int_eq(binary[8], t____00011[2]);
constraint int_eq(binary[9], binary[11]);
constraint int_eq(binary[9], t____00011[3]);
constraint int_eq(binary[10], t____00012[1]);
constraint int_eq(binary[11], binary[13]);
constraint int_eq(binary[11], t____00012[2]);
constraint int_eq(binary[12], binary[14]);
constraint int_eq(binary[12], t____00012[3]);
constraint int_eq(binary[13], t____00013[1]);
constraint int_eq(binary[14], binary[16]);
constraint int_eq(binary[14], t____00013[2]);
constraint int_eq(binary[15], binary[17]);
constraint int_eq(binary[15], t____00013[3]);
constraint int_eq(binary[16], t____00014[1]);
constraint int_eq(binary[17], binary[19]);
constraint int_eq(binary[17], t____00014[2]);
constraint int_eq(binary[18], binary[20]);
constraint int_eq(binary[18], t____00014[3]);
constraint int_eq(binary[19], t____00015[1]);
constraint int_eq(binary[20], binary[22]);
constraint int_eq(binary[20], t____00015[2]);
constraint int_eq(binary[21], binary[23]);
constraint int_eq(binary[21], t____00015[3]);
constraint int_eq(binary[22], t____00016[1]);
constraint int_eq(binary[23], binary[1]);
constraint int_eq(binary[23], t____00016[2]);
constraint int_eq(binary[24], binary[2]);
constraint int_eq(binary[24], t____00016[3]);
constraint int_eq(gcc[2], gcc[1]);
constraint int_eq(x[1], y____00001[8]);
constraint int_eq(y____00001[1], x[1]);
constraint int_eq_reif(0, bin_code[1], BOOL____00017) :: defines_var(BOOL____00017);
constraint int_eq_reif(0, bin_code[2], BOOL____00019) :: defines_var(BOOL____00019);
constraint int_eq_reif(0, bin_code[3], BOOL____00021) :: defines_var(BOOL____00021);
constraint int_eq_reif(0, bin_code[4], BOOL____00023) :: defines_var(BOOL____00023);
constraint int_eq_reif(0, bin_code[5], BOOL____00025) :: defines_var(BOOL____00025);
constraint int_eq_reif(0, bin_code[6], BOOL____00027) :: defines_var(BOOL____00027);
constraint int_eq_reif(0, bin_code[7], BOOL____00029) :: defines_var(BOOL____00029);
constraint int_eq_reif(0, bin_code[8], BOOL____00031) :: defines_var(BOOL____00031);
constraint int_eq_reif(1, bin_code[1], BOOL____00033) :: defines_var(BOOL____00033);
constraint int_eq_reif(1, bin_code[2], BOOL____00035) :: defines_var(BOOL____00035);
constraint int_eq_reif(1, bin_code[3], BOOL____00037) :: defines_var(BOOL____00037);
constraint int_eq_reif(1, bin_code[4], BOOL____00039) :: defines_var(BOOL____00039);
constraint int_eq_reif(1, bin_code[5], BOOL____00041) :: defines_var(BOOL____00041);
constraint int_eq_reif(1, bin_code[6], BOOL____00043) :: defines_var(BOOL____00043);
constraint int_eq_reif(1, bin_code[7], BOOL____00045) :: defines_var(BOOL____00045);
constraint int_eq_reif(1, bin_code[8], BOOL____00047) :: defines_var(BOOL____00047);
constraint int_lin_eq([-4, -2, -1, 1], [t____00009[1], t____00009[2], t____00009[3], x[1]], 0);
constraint int_lin_eq([-4, -2, -1, 1], [t____00010[1], t____00010[2], t____00010[3], x[2]], 0);
constraint int_lin_eq([-4, -2, -1, 1], [t____00011[1], t____00011[2], t____00011[3], x[3]], 0);
constraint int_lin_eq([-4, -2, -1, 1], [t____00012[1], t____00012[2], t____00012[3], x[4]], 0);
constraint int_lin_eq([-4, -2, -1, 1], [t____00013[1], t____00013[2], t____00013[3], x[5]], 0);
constraint int_lin_eq([-4, -2, -1, 1], [t____00014[1], t____00014[2], t____00014[3], x[6]], 0);
constraint int_lin_eq([-4, -2, -1, 1], [t____00015[1], t____00015[2], t____00015[3], x[7]], 0);
constraint int_lin_eq([-4, -2, -1, 1], [t____00016[1], t____00016[2], t____00016[3], x[8]], 0);
constraint int_lin_eq([-1, -1, -1, -1, -1, -1, -1, -1, 1], [INT____00018, INT____00020, INT____00022, INT____00024, INT____00026, INT____00028, INT____00030, INT____00032, gcc[1]], 0);
constraint int_lin_eq([-1, -1, -1, -1, -1, -1, -1, -1, 1], [INT____00034, INT____00036, INT____00038, INT____00040, INT____00042, INT____00044, INT____00046, INT____00048, gcc[2]], 0);
constraint int_lin_le([1, 1], [gcc[1], gcc[2]], 8);
constraint int_min(x[2], y____00001[1], y____00001[2]);
constraint int_min(x[3], y____00001[2], y____00001[3]);
constraint int_min(x[4], y____00001[3], y____00001[4]);
constraint int_min(x[5], y____00001[4], y____00001[5]);
constraint int_min(x[6], y____00001[5], y____00001[6]);
constraint int_min(x[7], y____00001[6], y____00001[7]);
constraint int_min(x[8], y____00001[7], y____00001[8]);
constraint kangaroo_int_all_different(x);
solve  satisfy;
