predicate kangaroo_int_all_different(array [int] of var int: x);
predicate kangaroo_int_all_different_reif(array [int] of var int: x, var bool: r);
var bool: BOOL____00002 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00003 :: is_defined_var :: var_is_introduced;
var bool: BOOL____00005 :: is_defined_var :: var_is_introduced;
var 3..6: INT____00001 :: is_defined_var :: var_is_introduced;
var 3..6: objective :: output_var = INT____00001;
array [1..2] of var 1..2: p :: output_array([1..1, 1..2]);
constraint int_eq_reif(p[1], 1, BOOL____00002) :: defines_var(BOOL____00002) :: domain;
constraint int_eq_reif(p[1], 2, BOOL____00003) :: defines_var(BOOL____00003) :: domain;
constraint int_eq_reif(p[2], 1, BOOL____00003) :: domain;
constraint int_eq_reif(p[2], 2, BOOL____00005) :: defines_var(BOOL____00005) :: domain;
constraint int_lin_eq([-1, 1, 2], [INT____00001, p[1], p[2]], 0) :: defines_var(INT____00001);
constraint int_ne(p[1], 1);
constraint int_ne(p[2], 2);
solve  :: int_search([p[1], p[2]], input_order, indomain_min, complete) minimize INT____00001;
